object test {


  /**
    * 根据关键词统计
    * @param filePath   源文件路径
    * @param keyword    关键词
    * @return
    */
  def calculateByKeyword(filePath : String, keyword: String): Long = {
    var sum = 0L
    // 由于数据量较大，应该一次读取一行
    val bfreader: BufferedReader = new BufferedReader(new FileReader(filePath))

    // 这里需要倒入break的包
    import scala.util.control.Breaks.{break, breakable}
    breakable {
      var line = ""
      // 循环查找
      while (true) {
        line = bfreader.readLine()
        // 确定循环出口
        if (line == null) break()
        if (line.contains(keyword)) sum += 1
      }
    }
    // 关闭流并返回结果
    bfreader.close()
    sum
  }


/**
    * 不考虑内存直接读取到内存中处理
    * @param filePath
    * @param keyword
    * @return
    */
  def calculateByKeyword1(filePath : String, keyword: String): Long = {
    Source.fromFile(filePath).getLines().count(_.contains(keyword))
  }


  /**
    * 计算给定UTC时间的请求成功的请求的占比
    * @param filePath   源文件路径
    * @param keyword    关键词
    * @param code       状态码
    */
  def getRate(filePath: String, keyword: String, code: String): Double = {

    var sum = 0L
    var total = 0L
    // 由于数据量较大，应该一次读取一行
    val bfreader: BufferedReader = new BufferedReader(new FileReader(filePath))

    // 这里需要倒入break的包
    import scala.util.control.Breaks.{break, breakable}
    breakable {
      var line = ""
      // 循环查找
      while (true) {
        line = bfreader.readLine()
        // 确定循环出口
        if (line == null) break()
        total += 1
        if (line.split(" ")(3).contains(date2UTC(keyword)) && code.equals(line.split(" ")(8))) sum += 1
      }
    }
    // 关闭流并返回结果
    bfreader.close()
    sum.asInstanceOf[Double] / total
  }

  /**
    * 不考虑内存限制，全部加载到内存中处理
    * 计算给定UTC时间的请求成功的请求的占比
    * @param filePath
    * @param keyword
    * @param code
    * @return
    */
  def getRate1(filePath: String, keyword: String, code: String): Double = {
    val text = Source.fromFile(filePath).getLines()
    val sum = text.count(line => line.split(" ")(3).contains(date2UTC(keyword))
      && code.equals(line.split(" ")(8)))
      .asInstanceOf[Double]
    val total = text.size

    sum / total
  }
